<?php

declare(strict_types=1);

namespace Laventure\Component\Routing\Collection;

use Laventure\Component\Routing\Route\RouteInterface;

/**
 * RouteCollection
 *
 * @author Jean-Claude <jeanyao@ymail.com>
 *
 * @license https://github.com/jeandev84/laventure-framework/blob/master/LICENSE
 *
 * @package  Laventure\Component\Routing\Collection
 *
 * Generated By PHPStorm 20.12.2023
 */
class RouteCollection implements RouteCollectionInterface
{
    /**
     * collect all routes
     *
     * @var RouteInterface[]
    */
    protected array $routes = [];



    /**
     * collect named routes
     *
     * @var RouteInterface[]
    */
    protected array $namedRoutes = [];


    /**
     * @param array $routes
    */
    public function __construct(array $routes = [])
    {
        $this->routes($routes);
    }



    /**
     * @inheritDoc
    */
    public function addRoute(RouteInterface $route): RouteInterface
    {
        $this->routes[] = $route;

        return $route;
    }




    /**
     * @inheritDoc
     */
    public function add(string $name, RouteInterface $route): RouteInterface
    {
        $this->namedRoutes[$name] = $route;

        return $this->addRoute($route);
    }




    /**
     * @inheritDoc
    */
    public function hasRoute(string $name): bool
    {
        return array_key_exists($name, $this->namedRoutes);
    }



    /**
     * @inheritDoc
    */
    public function getRoute(string $name): ?RouteInterface
    {
        return $this->namedRoutes[$name] ?? null;
    }





    /**
     * @inheritDoc
    */
    public function getNamedRoutes(): array
    {
        return $this->namedRoutes;
    }






    /**
     * @param RouteInterface[] $routes
     *
     * @return void
    */
    public function routes(array $routes): void
    {
        foreach ($routes as $route) {
            $this->addRoute($route);
        }
    }




    /**
     * @inheritDoc
    */
    public function getRoutes(): array
    {
        return $this->routes;
    }
}
