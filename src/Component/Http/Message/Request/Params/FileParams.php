<?php

declare(strict_types=1);

namespace Laventure\Component\Http\Message\Request\Params;

use Laventure\Component\Http\Message\Request\Upload\UploadedFile;
use Laventure\Component\Http\Parameter\Parameter;
use Psr\Http\Message\UploadedFileInterface;

/**
 * UploadedFiles
 *
 * @author Jean-Claude <jeanyao@ymail.com>
 *
 * @license https://github.com/jeandev84/laventure-framework/blob/master/LICENSE
 *
 * @package  Laventure\Component\Http\Message\Request\Params
 */
class FileParams extends Parameter
{
    public function __construct(array $params = [])
    {
        parent::__construct($params);
    }



    /**
     * @param array $params
     *
     * @return $this
    */
    public function add(array $params): static
    {
        return $this->addFromGlobals($params);
    }







    /**
     * @param array $files
     *
     * @return $this
     */
    private function addFromGlobals(array $files): static
    {
        $files = $this->transformInfoFiles($files);

        foreach ($files as $id => $fileArray) {
            foreach ($fileArray as $file) {
                $this->params[$id][] = $this->makeUploadedFile($file);
            }
        }

        return $this;
    }





    /**
     * @param array $files
     * @return array
    */
    private function transformInfoFiles(array $files): array
    {
        $transformed = [];

        foreach ($files as $name => $fileInfo) {
            if (is_array($fileInfo['name'])) {
                foreach ($fileInfo as $attribute => $file) {
                    foreach ($file as $index => $value) {
                        $transformed[$name][$index][$attribute] = $value;
                    }
                }
            } else {
                $transformed[$name][] = $fileInfo;
            }
        }

        return $transformed;
    }






    /**
     * @return UploadedFileInterface[]
    */
    public function all(): array
    {
        return parent::all(); // TODO: Change the autogenerated stub
    }




    /**
     * @param array $file
     *
     * @return UploadedFile
    */
    private function makeUploadedFile(array $file): UploadedFile
    {
        return new UploadedFile(
            $file['name'],
            $file['full_path'],
            $file['type'],
            $file['tmp_name'],
            $file['error'],
            $file['size']
        );
    }
}
